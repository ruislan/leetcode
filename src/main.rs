mod q1;
mod q3;
mod q4;
mod q5;
mod q6;
mod q7;
mod q8;
mod q9;
mod q11;
mod q12;
mod q13;
mod q14;
mod q20;
mod q21;
mod q26;
mod q27;
mod q28;
mod q35;
mod q38;
mod q53;
mod q58;
mod q66;
mod q67;
mod q69;
mod q70;
mod q88;
mod q118;
mod q119;
mod q121;
mod q122;
mod q125;
mod q136;
mod q167;
mod q168;
mod q169;
mod q171;
mod q172;
mod q189;
mod q198;
mod q202;
mod q204;
mod q215;
mod q217;
mod q219;
mod q231;
mod q258;
mod q263;
mod q268;
mod q283;
mod q290;
mod q299;
mod q303;
mod q344;
mod q347;
mod q349;
mod q350;
mod q367;
mod q383;
mod q387;
mod q389;
mod q392;
mod q401;
mod q405;
mod q409;
mod q412;
mod q414;
mod q415;
mod q423;
mod q434;
mod q441;
mod q443;
mod q448;
mod q451;
mod q453;
mod q455;
mod q456;
mod q459;
mod q461;
mod q462;
mod q463;
mod q474;
mod q476;
mod q482;
mod q485;
mod q496;
mod q500;
mod q504;
mod q506;
mod q507;
mod q509;
mod q520;
mod q521;
mod q532;
mod q541;
mod q551;
mod q557;
mod q561;
mod q575;
mod q581;
mod q594;
mod q598;
mod q605;
mod q628;
mod q633;
mod q643;
mod q645;
mod q657;
mod q665;
mod q674;
mod q680;
mod q682;
mod q686;
mod q693;
mod q696;
mod q697;
mod q703;
mod q704;
mod q705;
mod q706;
mod q709;
mod q717;
mod q720;
mod q724;
mod q728;
mod q733;
mod q744;
mod q746;
mod q747;
mod q748;
mod q762;
mod q771;
mod q784;
mod q788;
mod q796;
mod q804;
mod q806;
mod q811;
mod q819;
mod q821;
mod q824;
mod q830;
mod q844;
mod q849;
mod q852;
mod q859;
mod q860;
mod q868;
mod q877;
mod q884;
mod q896;
mod q905;
mod q908;
mod q914;
mod q917;
mod q922;
mod q925;
mod q929;
mod q933;
mod q937;
mod q941;
mod q944;
mod q949;
mod q953;
mod q961;
mod q965;
mod q970;
mod q976;
mod q977;
mod q985;
mod q989;
mod q997;
mod q1002;
mod q1005;
mod q1009;
mod q1010;
mod q1013;
mod q1018;
mod q1021;
mod q1025;
mod q1029;
mod q1033;
mod q1046;
mod q1047;
mod q1051;
mod q1071;
mod q1078;
mod q1089;
mod q1103;
mod q1108;
mod q1122;
mod q1137;
mod q1154;
mod q1160;
mod q1170;
mod q1175;
mod q1184;
mod q1185;
mod q1189;
mod q1200;
mod q1207;
mod q1217;
mod q1221;
mod q1232;
mod q1252;
mod q1260;
mod q1266;
mod q1275;
mod q1281;
mod q1287;
mod q1290;
mod q1295;
mod q1299;
mod q1304;
mod q1309;
mod q1310;
mod q1313;
mod q1317;
mod q1323;
mod q1331;
mod q1332;
mod q1337;
mod q1342;
mod q1346;
mod q1351;
mod q1356;
mod q1360;
mod q1365;
mod q1370;
mod q1374;
mod q1380;
mod q1385;
mod q1389;
mod q1394;
mod q1399;
mod q1403;
mod q1408;
mod q1413;
mod q1417;
mod q1422;
mod q1431;
mod q1436;
mod q1441;
mod q1446;
mod q1450;
mod q1455;
mod q1460;
mod q1464;
mod q1470;
mod q1475;
mod q1480;
mod q1486;
mod q1491;
mod interview_16_01;

pub struct Solution;

fn main() {
    let s = "abbba";
    let m = s.len() / 2;
    println!("{:?}", &s[..=m]);
    println!("{:?}", &s[m..]);
    println!("{:?}", &s.chars().rev().collect::<String>()[..=m]);
    println!("{:?} is palindrome", is_palindrome("abb"));
}

fn is_palindrome(s: &str) -> bool {
    let (mut left, mut right) = (0, s.len() - 1);
    while left <= right {
        if s[left..=left] != s[right..=right] { return false; }
        right -= 1;
        left += 1;
    }
    true
}
